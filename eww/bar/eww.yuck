(defpoll clock_hour   :interval "5s" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")

(defpoll has_bat     :interval "10h" "stat /sys/class/power_supply/BAT0 > /dev/null && echo true || echo false")
(defpoll bat_percent :interval "10s" "get-battery Percent")
(defpoll bat_icon    :interval "10s" "get-battery Icon")
(defpoll light_level :interval "10h" "sudo light")
(defpoll volume      :interval "10h" "(awk -F'[][]' '/Left:/ { print $2 }' <(amixer sget Master)) | sed 's/%//'")
(defpoll is_muted    :interval "10h" "(($(amixer sget Master | grep --count \"\[on\]\") < 1)) && echo 'true' || echo 'false'")

(defvar lightctrl "false")
(defvar soundctrl "false")
(defvar powermenu "false")

(defvar eww "eww")

(defwidget pmenu []
  (eventbox
    :onhover "${eww} update powermenu=true"
    :onhoverlost "${eww} update powermenu=false"
    :duration "650ms"
    (box
      :orientation "v" 
      :class "power"
      :valign "end"
      :vexpand true
      :halign "center"
      :orientation "v"
      :space-evenly false
      :spacing 8

      (box 
        :class "main"
        :hexpand false
        :height 40
        :width 40)
      (revealer
        :transition "slidedown"
        :reveal powermenu
        :visable powermenu 
        (box
          :orientation "v"
          :spacing 8

          (eventbox
            :halign "center" :height 20 :width 20 :class "lock" :onclick "tmux new 'pixel-lock > ~/locklog'")
          (eventbox
            :halign "center" :height 20 :width 20 :class "exit" :onclick "swaymsg exit")
          (eventbox
            :halign "center" :height 20 :width 20 :class "restart" :onclick "shutdown -r 0")
          (eventbox
            :halign "center" :height 20 :width 20 :class "shutdown" :onclick "shutdown 0")
          )))))

(defwidget time []
  (box
    :class "time"
    :orientation "v"
    (box clock_hour)
    (box clock_minute)))

(defwidget bat []
  (box
    :class "bat"
    :orientation "v"
    :valign "end"
    (metric :value { has_bat ? bat_percent : 100 } :name "battery")))
(defwidget sound []
  (eventbox
    :onhover "${eww} update soundctrl=true"
    :onhoverlost "${eww} update soundctrl=false"
    :duration "650ms"
    (box
      :class "sound"
      :valign "end"
      :vexpand true
      :orientation "v"
      :space-evenly false
      :spacing 8

      (revealer
        :transition "slideup"
        :reveal soundctrl
        :visable soundctrl
        (box
          :orientation "v"
          :space-evenly false
          (scale
            :value volume
            :onchange "${EWW_CMD} update volume={} && amixer sset Master {}%"
            :orientation "v"
            :flipped true
            :height 100)
          (box :halign "center" :orientation "v" "M"
            (checkbox
              :onchecked "${EWW_CMD} update is_muted=true && amixer sset Master mute"
              :onunchecked "${EWW_CMD} update is_muted=false && amixer sset Master unmute"))))
      (box
        :orientation "v"
        (metric_with_label 
          :label "${is_muted ? "M" : round(100 * volume / 99, 0)}"
          :value "${is_muted ? 100 : volume}"
          :name "volume")))))
(defwidget light []
  (eventbox
    :onhover "${eww} update lightctrl=true"
    :onhoverlost "${eww} update lightctrl=false"
    :duration "650ms"
    (box
      :class "light"
      :valign "end"
      :vexpand true
      :orientation "v"
      :space-evenly false
      :spacing 8

      (revealer
        :transition "slideup"
        :reveal lightctrl
        :visable lightctrl
        (box
          :class "controlls"
          :orientation "v"
          :space-evenly false
          (scale 
            :value light_level
            :onchange "${EWW_CMD} update light_level={} && sudo light -S {}"
            :orientation "v"
            :flipped true
            :height 100)
          (box :halign "center" :orientation "v" "KBD" 
            (checkbox
              :onchecked "sudo light -s sysfs/leds/platform::kbd_backlight -S 100"
              :onunchecked "sudo light -s sysfs/leds/platform::kbd_backlight -S 0"))))
      (box
        :orientation "v"
        (metric :value "${round(100 * light_level / 99, 0)}" :name "backlight")))))
(defwidget system_resources []
  (eventbox
    (circular-progress
      :class "resource"
      :height 40
      :width 40
      :thickness 5
      :clockwise true
      :start-at 30
      :value "${ EWW_DISK["/"].used_perc }"
      (circular-progress
        :class "resource"
        :height 30
        :width 30
        :thickness 5
        :clockwise true
        :start-at 40
        :value "${ EWW_RAM.used_mem_perc }"
        (circular-progress
          :class "resource"
          :height 20
          :width 20
          :thickness 5
          :clockwise true
          :start-at 50 
          :value "${ EWW_CPU.avg }")))))

(defwidget metric_with_label [? value name label]
  (circular-progress 
    :height 40
    :width 40
    :value "${100 * value / 99 > 100 ? 100 : 100 * value / 99}"
    :thickness 5
    :clockwise true
    :tooltip "The ${name} is at ${value}%"
    :start-at 30
    (label :text label)))
(defwidget metric [? value name]
  (metric_with_label :value value :name name :label value))

(defwindow bar
  :monitor 0
  :geometry (geometry 
            :x "0%"
            :y "20px"
            :width "60px"
            :height "100%"
            :anchor "left center")
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :exclusive true
  (box
    :orientation "v"
    :class "base"
    (box :valign "start" (pmenu))
    (box 
      :space-evenly false
      :orientation "v"
      :spacing 8
      :valign "end"
      (box
        :orientation "v"
        :space-evenly false
        :spacing 8
        :class "metrics"
        (sound)
        (light)
        (bat)
        ; (literal :content )
        (system_resources))
        (time))))
